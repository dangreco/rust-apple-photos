use crate::apple_photos::Fromable;
use rusqlite::Result;
use rusqlite::Row;

#[derive(Debug)]
pub struct Face {
    pub model_id: i32,
    pub uuid: String,
    pub is_in_trash: i32,
    pub person_id: i32,
    pub has_been_synced: i32,
    pub adjustment_uuid: String,
    pub image_model_id: i32,
    pub source_width: i32,
    pub source_height: i32,
    pub center_x: f64,
    pub center_y: f64,
    pub size: f64,
    pub left_eye_x: f64,
    pub left_eye_y: f64,
    pub right_eye_x: f64,
    pub right_eye_y: f64,
    pub mouth_x: f64,
    pub mouth_y: f64,
    pub hidden: i32,
    pub manual: i32,
    pub has_smile: i32,
    pub blur_score: f64,
    pub is_left_eye_closed: i32,
    pub is_right_eye_closed: i32,
    pub name_source: i32,
    pub pose_roll: f64,
    pub pose_yaw: f64,
    pub pose_pitch: f64,
    pub face_algorithm_version: i32,
    pub expression_confidence: f64,
    pub expression_type_1: i32,
    pub expression_type_2: i32,
    pub expression_type_3: i32,
    pub expression_score_1: f64,
    pub expression_score_2: f64,
    pub expression_score_3: f64,
    pub quality_measure: i32,
    pub cluster_sequence_number: i32,
    pub sync_property_modified_date: f64,
    pub face_group_id: i32,
    pub confirmed_face_crop_generation_state: i32,
    pub face_type: i32,
    pub training_type: i32,
    pub cloud_name_source: i32,
    pub person_uuid: String,
}

impl Face {
    fn new(
        model_id: i32,
        uuid: String,
        is_in_trash: i32,
        person_id: i32,
        has_been_synced: i32,
        adjustment_uuid: String,
        image_model_id: i32,
        source_width: i32,
        source_height: i32,
        center_x: f64,
        center_y: f64,
        size: f64,
        left_eye_x: f64,
        left_eye_y: f64,
        right_eye_x: f64,
        right_eye_y: f64,
        mouth_x: f64,
        mouth_y: f64,
        hidden: i32,
        manual: i32,
        has_smile: i32,
        blur_score: f64,
        is_left_eye_closed: i32,
        is_right_eye_closed: i32,
        name_source: i32,
        pose_roll: f64,
        pose_yaw: f64,
        pose_pitch: f64,
        face_algorithm_version: i32,
        expression_confidence: f64,
        expression_type_1: i32,
        expression_type_2: i32,
        expression_type_3: i32,
        expression_score_1: f64,
        expression_score_2: f64,
        expression_score_3: f64,
        quality_measure: i32,
        cluster_sequence_number: i32,
        sync_property_modified_date: f64,
        face_group_id: i32,
        confirmed_face_crop_generation_state: i32,
        face_type: i32,
        training_type: i32,
        cloud_name_source: i32,
        person_uuid: String,
    ) -> Face {
        return Face {
            model_id,
            uuid,
            is_in_trash,
            person_id,
            has_been_synced,
            adjustment_uuid,
            image_model_id,
            source_width,
            source_height,
            center_x,
            center_y,
            size,
            left_eye_x,
            left_eye_y,
            right_eye_x,
            right_eye_y,
            mouth_x,
            mouth_y,
            hidden,
            manual,
            has_smile,
            blur_score,
            is_left_eye_closed,
            is_right_eye_closed,
            name_source,
            pose_roll,
            pose_yaw,
            pose_pitch,
            face_algorithm_version,
            expression_confidence,
            expression_type_1,
            expression_type_2,
            expression_type_3,
            expression_score_1,
            expression_score_2,
            expression_score_3,
            quality_measure,
            cluster_sequence_number,
            sync_property_modified_date,
            face_group_id,
            confirmed_face_crop_generation_state,
            face_type,
            training_type,
            cloud_name_source,
            person_uuid,
        };
    }

    fn from(row: &Row) -> Result<Face> {
        Ok(Face::new(
            row.get(0)?,
            row.get(1)?,
            row.get(2)?,
            row.get(3)?,
            row.get(4)?,
            row.get(5).unwrap_or("".to_string()),
            row.get(6).unwrap_or(-1),
            row.get(7)?,
            row.get(8)?,
            row.get(9)?,
            row.get(10)?,
            row.get(11)?,
            row.get(12)?,
            row.get(13)?,
            row.get(14)?,
            row.get(15)?,
            row.get(16)?,
            row.get(17)?,
            row.get(18)?,
            row.get(19)?,
            row.get(20)?,
            row.get(21).unwrap_or(-1.0),
            row.get(22)?,
            row.get(23)?,
            row.get(24)?,
            row.get(25).unwrap_or(0.0),
            row.get(26).unwrap_or(0.0),
            row.get(27).unwrap_or(0.0),
            row.get(28).unwrap_or(-1),
            row.get(29).unwrap_or(-1.0),
            row.get(30).unwrap_or(-1),
            row.get(31).unwrap_or(-1),
            row.get(32).unwrap_or(-1),
            row.get(33).unwrap_or(-1.0),
            row.get(34).unwrap_or(-1.0),
            row.get(35).unwrap_or(-1.0),
            row.get(36)?,
            row.get(37)?,
            row.get(38).unwrap_or(-1.0),
            row.get(39).unwrap_or(-1),
            row.get(40).unwrap_or(-2),
            row.get(41)?,
            row.get(42)?,
            row.get(43)?,
            row.get(44).unwrap_or("".to_string()),
        ))
    }
}

impl Fromable<Face> for Face {
    fn from(row: &Row) -> Result<Face> {
        return Face::from(row);
    }
}
