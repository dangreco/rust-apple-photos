use crate::apple_photos::Fromable;
use rusqlite::Result;
use rusqlite::Row;

#[derive(Debug)]
pub struct Master {
    pub model_id: i32,
    pub uuid: String,
    pub fingerprint: String,
    pub orientation: i32,
    pub name: String,
    pub create_date: f64,
    pub is_in_trash: i32,
    pub in_trash_date: f64,
    pub cloud_library_state: i32,
    pub has_been_synced: i32,
    pub is_cloud_quarantined: i32,
    pub file_is_reference: i32,
    pub is_missing: i32,
    pub duration: f64,
    pub file_modification_date: f64,
    pub bookmark_id: i32,
    pub volume_id: i32,
    pub file_size: i32,
    pub width: i32,
    pub height: i32,
    pub uti: String,
    pub import_group_uuid: String,
    pub alternate_master_uuid: String,
    pub original_version_name: String,
    pub file_name: String,
    pub is_externally_editable: i32,
    pub is_truly_raw: i32,
    pub has_attachments: i32,
    pub has_notes: i32,
    pub image_path: String,
    pub image_date: f64,
    pub file_creation_date: f64,
    pub original_file_name: String,
    pub original_file_size: i32,
    pub imported_by: i32,
    pub originating_asset_identifier: String,
    pub burst_uuid: String,
    pub import_complete: i32,
    pub image_time_zone_offset_seconds: i32,
    pub photo_stream_tag_id: String,
    pub media_group_id: String,
    pub has_checked_media_group_id: i32,
    pub grouping_uuid: String,
    pub cloud_imported_by: i32,
}

impl Master {
    pub fn new(
        model_id: i32,
        uuid: String,
        fingerprint: String,
        orientation: i32,
        name: String,
        create_date: f64,
        is_in_trash: i32,
        in_trash_date: f64,
        cloud_library_state: i32,
        has_been_synced: i32,
        is_cloud_quarantined: i32,
        file_is_reference: i32,
        is_missing: i32,
        duration: f64,
        file_modification_date: f64,
        bookmark_id: i32,
        volume_id: i32,
        file_size: i32,
        width: i32,
        height: i32,
        uti: String,
        import_group_uuid: String,
        alternate_master_uuid: String,
        original_version_name: String,
        file_name: String,
        is_externally_editable: i32,
        is_truly_raw: i32,
        has_attachments: i32,
        has_notes: i32,
        image_path: String,
        image_date: f64,
        file_creation_date: f64,
        original_file_name: String,
        original_file_size: i32,
        imported_by: i32,
        originating_asset_identifier: String,
        burst_uuid: String,
        import_complete: i32,
        image_time_zone_offset_seconds: i32,
        photo_stream_tag_id: String,
        media_group_id: String,
        has_checked_media_group_id: i32,
        grouping_uuid: String,
        cloud_imported_by: i32,
    ) -> Master {
        Master {
            model_id,
            uuid,
            fingerprint,
            orientation,
            name,
            create_date,
            is_in_trash,
            in_trash_date,
            cloud_library_state,
            has_been_synced,
            is_cloud_quarantined,
            file_is_reference,
            is_missing,
            duration,
            file_modification_date,
            bookmark_id,
            volume_id,
            file_size,
            width,
            height,
            uti,
            import_group_uuid,
            alternate_master_uuid,
            original_version_name,
            file_name,
            is_externally_editable,
            is_truly_raw,
            has_attachments,
            has_notes,
            image_path,
            image_date,
            file_creation_date,
            original_file_name,
            original_file_size,
            imported_by,
            originating_asset_identifier,
            burst_uuid,
            import_complete,
            image_time_zone_offset_seconds,
            photo_stream_tag_id,
            media_group_id,
            has_checked_media_group_id,
            grouping_uuid,
            cloud_imported_by,
        }
    }

    pub fn from(row: &Row) -> Result<Master> {
        Ok(Master::new(
            row.get(0)?,
            row.get(1)?,
            row.get(2).unwrap_or("".to_string()),
            row.get(3)?,
            row.get(4)?,
            row.get(5)?,
            row.get(6)?,
            row.get(7).unwrap_or(-1.0),
            row.get(8).unwrap_or(-2),
            row.get(9)?,
            row.get(10)?,
            row.get(11)?,
            row.get(12)?,
            row.get(13).unwrap_or(-1.0),
            row.get(14).unwrap_or(-1.0),
            row.get(15).unwrap_or(-1),
            row.get(16).unwrap_or(-1),
            row.get(17).unwrap_or(-1),
            row.get(18)?,
            row.get(19)?,
            row.get(20)?,
            row.get(21)?,
            row.get(22).unwrap_or("".to_string()),
            row.get(23).unwrap_or("".to_string()),
            row.get(24)?,
            row.get(25)?,
            row.get(26)?,
            row.get(27)?,
            row.get(28)?,
            row.get(29)?,
            row.get(30)?,
            row.get(31).unwrap_or(-1.0),
            row.get(32).unwrap_or("".to_string()),
            row.get(33).unwrap_or(-1),
            row.get(34)?,
            row.get(35).unwrap_or("".to_string()),
            row.get(36).unwrap_or("".to_string()),
            row.get(37)?,
            row.get(38)?,
            row.get(39).unwrap_or("".to_string()),
            row.get(40).unwrap_or("".to_string()),
            row.get(41)?,
            row.get(42).unwrap_or("".to_string()),
            row.get(43).unwrap_or(-1),
        ))
    }
}

impl Fromable<Master> for Master {
    fn from(row: &Row) -> Result<Master> {
        return Master::from(row);
    }
}
