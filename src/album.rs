use crate::apple_photos::Fromable;
use rusqlite::Result;
use rusqlite::Row;

#[derive(Debug)]
pub struct Album {
    pub model_id: i32,
    pub uuid: String,
    pub album_type: i32,
    pub album_subclass: i32,
    pub name: String,
    pub folder_uuid: String,
    pub query_folder_uuid: String,
    pub poster_version_uuid: String,
    pub selected_track_path_uuid: String,
    pub sort_key_path: String,
    pub sort_ascending: i32,
    pub custom_sort_available: i32,
    pub create_date: f64,
    pub is_favorite: i32,
    pub is_in_trash: i32,
    pub in_trash_date: f64,
    pub is_hidden: i32,
    pub is_magic: i32,
    pub color_label_index: i32,
    pub face_sort_key_path: String,
    pub recent_user_change_date: f64,
    pub filter_data: Vec<u8>,
    pub query_data: Vec<u8>,
    pub is_pinned: i32,
    pub cloud_library_state: i32,
    pub has_been_synced: i32,
    pub cloud_identifier: String,
    pub is_cloud_quarantined: i32,
    pub project_extension_identifier: String,
    pub project_document_type: String,
    pub project_extension_rendered_preview_uuid: String,
}

impl Album {
    pub fn new(
        model_id: i32,
        uuid: String,
        album_type: i32,
        album_subclass: i32,
        name: String,
        folder_uuid: String,
        query_folder_uuid: String,
        poster_version_uuid: String,
        selected_track_path_uuid: String,
        sort_key_path: String,
        sort_ascending: i32,
        custom_sort_available: i32,
        create_date: f64,
        is_favorite: i32,
        is_in_trash: i32,
        in_trash_date: f64,
        is_hidden: i32,
        is_magic: i32,
        color_label_index: i32,
        face_sort_key_path: String,
        recent_user_change_date: f64,
        filter_data: Vec<u8>,
        query_data: Vec<u8>,
        is_pinned: i32,
        cloud_library_state: i32,
        has_been_synced: i32,
        cloud_identifier: String,
        is_cloud_quarantined: i32,
        project_extension_identifier: String,
        project_document_type: String,
        project_extension_rendered_preview_uuid: String,
    ) -> Album {
        Album {
            model_id,
            uuid,
            album_type,
            album_subclass,
            name,
            folder_uuid,
            query_folder_uuid,
            poster_version_uuid,
            selected_track_path_uuid,
            sort_key_path,
            sort_ascending,
            custom_sort_available,
            create_date,
            is_favorite,
            is_in_trash,
            in_trash_date,
            is_hidden,
            is_magic,
            color_label_index,
            face_sort_key_path,
            recent_user_change_date,
            filter_data,
            query_data,
            is_pinned,
            cloud_library_state,
            has_been_synced,
            cloud_identifier,
            is_cloud_quarantined,
            project_extension_identifier,
            project_document_type,
            project_extension_rendered_preview_uuid,
        }
    }

    pub fn from(row: &Row) -> Result<Album> {
        return Ok(Album::new(
            row.get(0)?,
            row.get(1)?,
            row.get(2)?,
            row.get(3)?,
            row.get(4).unwrap_or("".to_string()),
            row.get(5)?,
            row.get(6).unwrap_or("".to_string()),
            row.get(7).unwrap_or("".to_string()),
            row.get(8).unwrap_or("".to_string()),
            row.get(9)?,
            row.get(10)?,
            row.get(11)?,
            row.get(12).unwrap_or(-1.0),
            row.get(13)?,
            row.get(14)?,
            row.get(15).unwrap_or(-1.0),
            row.get(16)?,
            row.get(17)?,
            row.get(18)?,
            row.get(19).unwrap_or("".to_string()),
            row.get(20)?,
            row.get(21).unwrap_or(vec![]),
            row.get(22).unwrap_or(vec![]),
            row.get(23)?,
            row.get(24).unwrap_or(-2),
            row.get(25)?,
            row.get(26).unwrap_or("".to_string()),
            row.get(27)?,
            row.get(28).unwrap_or("".to_string()),
            row.get(29).unwrap_or("".to_string()),
            row.get(30).unwrap_or("".to_string()),
        ));
    }
}

impl Fromable<Album> for Album {
    fn from(row: &Row) -> Result<Album> {
        return Album::from(row);
    }
}
